import axios from 'axios'
import { OpenVidu } from 'openvidu-browser'
import React, { Component } from 'react'
import UserVideoComponent from './UserVideoComponent'
import Countdown from '../Countdown'
import { connect } from 'react-redux'
import styled from 'styled-components'
import logo from '../../assets/logo.png'
import addTimerImg from '../../assets/add-timer.png'
import backImg from '../../assets/base.PNG'
import pointImg from '../../assets/carrot.png'
import {
  MdHelpOutline,
  MdLogout,
  MdSmartToy,
  MdOutlineChangeCircle,
  MdVideocam,
  MdVideocamOff,
  MdMic,
  MdMicOff,
} from 'react-icons/md'

import {
  ToastsContainer,
  ToastsStore,
  ToastsContainerPosition,
} from 'react-toasts'

import Messages from './meeting-chat/Messages'

import myAxios from '../../api/http'
import { loadUser } from '../auth/login/login-slice'

// import { compareResult } from './vote-slice'
// import randomTopic from '../../DATA/randomTopic.json'

const OPENVIDU_SERVER_URL = 'https://i7e104.p.ssafy.io:4443'
// const OPENVIDU_SERVER_URL = 'https://coach82.p.ssafy.io:4443'
const OPENVIDU_SERVER_SECRET = 'MY_SECRET'

// Ï†ÑÏ≤¥ Î∞∞Í≤Ω
const Background = styled.div`
  background-image: url(${backImg});
  background-size: cover;
  background-repeat: no-repeat;
  background-color: #fffdde;
  width: 100vw;
  height: 100vh;
  overflow: auto;
  display: flex;
  flex-direction: column;
`

// Header: Î°úÍ≥†, ÌÉÄÏù¥Î®∏, Ìè¨Ïù∏Ìä∏, ÎèÑÏõÄÎßê
const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 10%;
  width: 100%;
`

// Ìó§ÎçîÎ°úÍ≥†
const LogoBox = styled.div`
  height: 100%;
  margin: 0.5rem 2rem;
  width: 20%;

  @media (max-height: 720px) {
    height: 64px;
  }
`
const Logo = styled.img.attrs({ src: `${logo}` })`
  height: 100%;
`

// ÌÉÄÏù¥Î®∏
const TimerBox = styled.div`
  height: 75%;
  background-color: #f6a9a9;
  padding: 0rem 1.5rem;
  border-radius: 1.8rem;
  display: flex;
  align-items: center;
  position: relative;
`

const Timer = styled.p`
  font-size: 2rem;
  font-weight: bold;
  font-family: Minseo;
`

// ÌÉÄÏù¥Î®∏ Ïó∞Ïû•
const AddBox = styled.div`
  position: relative;
  cursor: pointer;

  &:hover .timerTip {
    visibility: visible;
  }
`

const AddTimerImg = styled.img.attrs({ src: `${addTimerImg}` })`
  height: 2rem;
  z-index: 1;
`

const AddText = styled.span`
  visibility: hidden;
  width: 100px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 0.3rem;
  padding: 2px 0;
  font-family: Minseo;
  opacity: 80%;

  position: absolute;
  z-index: 1;
  top: 100%;
  left: 50%;
  margin-left: -3rem;
`

const TimerCheckBox = styled.div`
  position: absolute;
  top: 15%;
  right: 0%;
  margin-right: -7rem;
  display: flex;
`

const TimerCheckBtn = styled.button`
  border: 0;
  border-radius: 0.3rem;
  font-family: Minseo;
  font-size: 1.1rem;
  width: 3rem;
  padding: 0.4rem 0.3rem;
  cursor: pointer;

  &.ok {
    background-color: #b5eaea;
    margin-right: 0.2rem;

    &&:hover {
      background-color: #97caca; 
    }
  }

  &.no {
    background-color: #ff728e;

    &&:hover {
      background-color: #d3546d; 
    }
  }
`

// Ìè¨Ïù∏Ìä∏
const LeftBox = styled.div`
  margin-right: 2rem;
  display: flex;
  align-items: center;
  justify-content: end;
  height: 100%;
  width: 20%;
`

const PointImg = styled.img.attrs({ src: `${pointImg}` })`
  height: 1.8rem;
`
const PointText = styled.p`
  color: #333333;
  font-size: 2rem;
  font-family: Minseo;
  margin-right: 1rem;
  font-weight: bold;
`


const Container = styled.div`
  /* outline: 3px solid; */
  width: 100%;
  height: 90%;
`
const TopicBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  height: 5%;
  width: 100%;
  padding: 1rem 0;
  background-color: #f6a9a9;
  margin-bottom: 0.5rem;
  text-align: center;
`

const TopicText = styled.p`
  font-family: Minseo;
  font-size: 1.8rem;
`

const ChangeBox = styled.div`
  position: relative;

  &:hover .changeTip {
    visibility: visible;
  }
`

const TopicIcon = styled(MdOutlineChangeCircle)`
  font-size: 2rem;
  padding: 0 1rem;
  cursor: pointer;
`

const ChangeText = styled.span`
  visibility: hidden;
  width: 100px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 0.3rem;
  padding: 2px 0;
  font-family: Minseo;
  opacity: 80%;

  position: absolute;
  z-index: 1;
  top: 100%;
  left: 50%;
  margin-left: -3rem;
`

const SessionBox = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 80%;
  position: relative;
`

// Ï±ÑÌåÖÏ∞Ω + ÎπÑÎîîÏò§
const ChatVideoBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 95%;
`

const ChatBox = styled.div`
  width: 20%;
  height: 95%;
  padding: 0 2%;
  position: relative;
  margin-right: 2rem;
`

const MessageBox = styled.div`
  height: 73%;
  width: 100%;
  /* border: 2px solid; */
  overflow-y: scroll;
  overflow-x: auto;

  &::-webkit-scrollbar {
    width: 0.5rem;
  }

  &::-webkit-scrollbar-thumb {
    height: 15%;
    background-color: #ffcaca;
    border-radius: 2rem;
  }

  &::-webkit-scrollbar-track {
    background-color: #ffecec;
    border-radius: 2rem;
  }
`

const MyInfo = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 110%;
  border-radius: 1rem;
  padding: 0.3rem 0.5rem;
  font-family: Minseo;
  font-size: 1.3rem;
  color: #93adeb;
`

const InfoIcon = styled(MdSmartToy)`
  color: #1c3879;
  font-size: 1.8rem;
  margin-right: 0.2rem;
`

const InfoPoint = styled.span`
  font-family: Minseo;
  font-size: 1.4rem;
  color: #4f6aa8;
  margin: 0 0.2rem;
  font-weight: 600;
`



const VideoBox = styled.div`
  display: grid;
  grid-template-rows: 49% 49%;
  grid-auto-flow: column;
  grid-gap: 2%;
  /* max-width: 60%; */
  height: 90%;
  border-radius: 1rem;
  background-color: #b5eaea;
  border: 4px dashed #5fcac3;
  padding: 1rem 3rem;
`

const SendMsgBox = styled.div`
  width: 90%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: absolute;
  bottom: 0;
`

const SendMsg = styled.input`
  width: 70%;
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  border: 0;
  border-bottom: 2px solid #333333;
  font-size: 1.3rem;
  font-family: Minseo;
`

const SendBtn = styled.p`
  background-color: #fcd1d1;
  border-radius: 1rem;
  padding: 0.5rem 1rem;
  font-size: 1.3rem;
  font-family: Minseo;
  border: 0;
  border-bottom: 2px solid #333333;
  cursor: pointer;
`

const CommanderWarn = styled.div`
  font-family: Minseo;
  color: red;
  padding: 0 1rem;
`

// Ï∫† on/off + ÎÇòÍ∞ÄÍ∏∞
const Footer = styled.div`
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  position: fixed;
  bottom: 1.5rem;
`

const MicCamBox = styled.div`
  width: 5rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
`

// ÎßàÏù¥ÌÅ¨, Ïπ¥Î©îÎùº on/off
const MicOn = styled(MdMic)`
  cursor:pointer;
  color: #7e6752;
`
const MicOff = styled(MdMicOff)`
  cursor:pointer;
  color: #7e6752;
`
const CamOn = styled(MdVideocam)`
  cursor:pointer;
  color: #7e6752;
`
const CamOff = styled(MdVideocamOff)`
  cursor:pointer;
  color: #7e6752;
`

const FooterRight = styled.div`
  right: 0;
  width: 30%;
  display: flex;
  flex-direction: row;
  justify-content: end;
  align-items: center;
`

const ShowRanking = styled.div`
  color: #333333;
  background-color: #f38ba0;
  border-radius: 1rem;
  padding: 0.6rem 0.8rem;
  font-family: Minseo;
  font-weight: 600;
  font-size: 1.3rem;
  cursor: pointer;
  position: relative;

  &:hover .rankingTip {
    visibility: visible;
  }
`

const RankingContainer = styled.div`
  /* border: 4px solid #333333; */
  visibility: hidden;
  background-color: #f6a9a9;
  opacity: 90%;
  color: #333333;
  font-family: Minseo;
  border-radius: 0.5rem;
  padding: 0.5rem;
  font-family: Minseo;
  position: absolute;
  bottom: 110%;
  right: -30%;
  z-index: 3;
  text-align: center;
  width: 20vw;
  height: 30vw;
  display: flex;
  flex-direction: column;
  align-items: center;
`

const RankingHeader = styled.div`
  padding: 0.5rem 0;
  z-index: 4;
  width: 100%;
  font-size: 2.3rem;
  border-bottom: 2px double #333333;
`

const RankingContent = styled.div`
  padding-top: 0.5rem;
  z-index: 4;
  width: 100%;
  font-size: 2rem;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
`

// ÎÇòÍ∞ÄÍ∏∞ Î≤ÑÌäº
const LeaveBox = styled.div`
  position: relative;
  cursor: pointer;
  &:hover .leaveTip {
    visibility: visible;
  }
`

const Leave = styled(MdLogout)`
  height: 100%;
  width: 2rem;
  margin: 0 2rem;
  color: #f38ba0;
`

const LeaveText = styled.p`
  visibility: hidden;
  background-color: #f38ba0;
  color: #fff;
  text-align: center;
  border-radius: 0.3rem;
  padding: 0.2rem 0.5rem;
  font-family: Minseo;
  opacity: 80%;
  position: absolute;
  z-index: 2;
  top: 0%;
  margin-top: -2rem;
  left: 50%;
  margin-left: -1.9rem;
`

class Meeting extends Component {
  constructor(props) {
    super(props)

    this.state = {
      // ÏÑ∏ÏÖò Ï†ïÎ≥¥
      mySessionId: undefined,
      myTotal: undefined,
      // myUserName: 'Participant' + Math.floor(Math.random() * 100),
      session: undefined,
      mainStreamManager: undefined,
      publisher: undefined,
      subscribers: [],
      // myUserNickname: undefined,
      myUserName: undefined,
      // 10Î∂ÑÏùò ÏãúÍ∞ÑÏ†úÌïú
      timeLimit: 600,
      minute: 10,
      sec: 0,
      myUserPoint: 0,
      showAddTimer: false,
      addTimeLimit: 3,

      //Ï±ÑÌåÖÍ¥ÄÎ†®
      message: '',
      messages: [],
      pairUser: undefined,
      chatConnection: [],
      user: undefined,

      //Ìï¥Ïâ¨ÌÉúÍ∑∏
      hashList: [],

      //ÎûúÎç§Ï£ºÏ†ú

      randomTopic: 'üéÅ ÎûúÎç§ Ï£ºÏ†ú ÎΩëÍ∏∞ üéÅ',

      topicList: randomTopicList,

      randomCount: 3,

      //Î°§ÏΩîÎìú
      myRoleCode: undefined,
      roleList: ['ÏÜîÎ°ú', 'ÏïÑÎ∞îÌÉÄ', 'ÏßÄÏãúÏûê'],
      //Ïù¥Í±¥ flag Ïó≠Ìï†Ïù∏Í∞Ä
      check: false,

      // ÎπÑÎîîÏò§, Ïò§ÎîîÏò§ Í∏∞Î≥∏ ÏÑ§Ï†ï
      videostate: true,
      audiostate: true,

      // ÏãúÍ∞Ñ Î∂ÑÎ¶¨
      meetingTime: true,
      voteTime: false,
      resultTime: false,

      // Ìà¨Ìëú Í≤∞Í≥º
      // result: {},
      correctPoint: 0,
      wrongPoint: 0,
      calcReult: false,
      pairConnection: null,
      ranking: null || {},
    }

    // openVidu
    this.joinSession = this.joinSession.bind(this)
    this.leaveSession = this.leaveSession.bind(this)
    this.switchCamera = this.switchCamera.bind(this)
    this.handleChangeSessionId = this.handleChangeSessionId.bind(this)
    this.handleChangeUserName = this.handleChangeUserName.bind(this)
    this.handleMainVideoStream = this.handleMainVideoStream.bind(this)
    this.onbeforeunload = this.onbeforeunload.bind(this)

    // ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
    this.intervalRef = React.createRef()

    // ÎûúÎç§ Ï£ºÏ†ú ÏÑ§Ï†ï
    this.pickTopic = this.pickTopic.bind(this)
    this.addTimer = this.addTimer.bind(this)
    this.setTimer = this.setTimer.bind(this)

    // ÌéòÏù¥ÏßÄ Ïù¥Îèô
    this.moveToVote = this.moveToVote.bind(this)
    this.moveToResult = this.moveToResult.bind(this)

    //Ï±ÑÌåÖ
    this.sendmessageByClick = this.sendmessageByClick.bind(this)
    this.sendmessageByEnter = this.sendmessageByEnter.bind(this)
    this.handleChatMessageChange = this.handleChatMessageChange.bind(this)

    // Ìà¨ÌëúÍ≤∞Í≥º Î∂àÎü¨Ïò§Í∏∞
    // this.setResult = this.setResult.bind(this)
    this.compareResult = this.compareResult.bind(this)
  }

  componentDidMount() {
    const { mode } = this.props
    const { login } = this.props
    const { hashtag } = this.props
    const { rate } = this.props
    const { chat } = this.props
    const { isMatched } = chat
    const { userNickname, userPoint } = login.user
    const { hashesOwned } = hashtag
    const { uuid, roleCode, user, total } = mode
    const { userRate } = rate.rateInfo

    if (roleCode !== 1) {
      const pairUser = mode.pairUser
      console.log('ÌéòÏñ¥Ïú†Ï†Ä Ï†ïÎ≥¥ Ï†ÄÏû•', pairUser)
      this.setState({ pairUser: pairUser })
    }

    this.setState({
      mySessionId: uuid,
      myTotal: total,
    })

    this.joinSession()

    // openVidu
    window.addEventListener('beforeunload', this.onbeforeunload)

    // ÌÉÄÏù¥Î®∏
    this.intervalRef.current = setInterval(() => {
      // timeLimitÏù¥ ÎÇ®ÏùÄ Í≤ΩÏö∞, Ïπ¥Ïö¥ÌåÖ
      if (this.state.timeLimit > 0) {
        this.setState((prevState) => ({
          timeLimit: prevState.timeLimit - 1,
          minute: parseInt((prevState.timeLimit - 1) / 60),
          sec: (prevState.timeLimit - 1) % 60,
        }))
      } else {
        if (this.state.meetingTime) {
          this.moveToVote()
        } else if (this.state.voteTime) {
          if (!this.state.calcResult) {
            this.compareResult()
            this.moveToResult()
          }
        }
      }
    }, 1000)

    //Ïùå this.setStateÎ•º Ïôú Îî∞Î°ú Ìï¥Ï£ºÍ≥† ÏûàÏßÄ
    this.setState({
      myUserName: userNickname,
      myUserPoint: userPoint,
      hashList: hashesOwned,
      myRoleCode: roleCode,
      myUserData: user,
    })
  }

  componentWillUnmount() {
    //openVidu
    window.removeEventListener('beforeunload', this.onbeforeunload)

    // unmount Îê†Îïå, Ïä§ÌÜ±ÏõåÏπò Ï¢ÖÎ£å
    this.stopTimer()
  }

  // Ïä§ÌÜ±ÏõåÏπò Ï¢ÖÎ£å Ìï®Ïàò: clearInterval(Î≥ÄÏàò)
  stopTimer = () => {
    clearInterval(this.intervalRef.current)
  }

  // Ïä§ÌÜ±ÏõåÏπò ÏãúÍ∞Ñ Ï∂îÍ∞Ä Ìï®Ïàò
  async addTimer() {
    if (this.state.addTimeLimit > 0) {
      try {
        const restPointRes = await myAxios.get('/honjaya/points')
        if (restPointRes.data.point < 100) {
          ToastsStore.info('Î£®Ìå°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§ ‚ùó')
          return
        } else if (this.state.addTimeLimit > 0) {
          await this.setState({ timeLimit: this.state.timeLimit + 180 })
          await this.setState({ showAddTimer: false })
          await this.state.session.signal({
            data: `${this.state.timeLimit}`,
            to: [],
            type: 'addTime',
          })
          const res = await myAxios.put('/honjaya/points', {
            point: -100,
          })
          console.log('ÏãúÍ∞ÑÏ∂îÍ∞Ä Ï†úÌïú ÌöüÏàò Ï∞®Í∞ê Ï†Ñ', this.state.addTimeLimit)
          await this.setState({
            myUserPoint: res.data.point,
          })
          console.log('ÏãúÍ∞ÑÏ∂îÍ∞Ä Ï†úÌïú ÌöüÏàò Ï∞®Í∞ê ÌõÑ', this.state.addTimeLimit)
          ToastsStore.info('-100 Î£®Ìå° ‚ùó')
        } else {
          ToastsStore.info('ÎçîÏù¥ÏÉÅ ÏãúÍ∞Ñ Ïó∞Ïû•Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§')

        }
      } catch (err) {
        console.log('error')
      }
    } else {
      ToastsStore.info('ÎçîÏù¥ÏÉÅ ÏãúÍ∞Ñ Ïó∞Ïû•Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§')
    }
  }

  componentDidUpdate() {
    this.scrollToBottom()

  }

  scrollToBottom = () => {
    if (this.messagesEnd) {
      this.messagesEnd.scrollIntoView({ behavior: 'smooth' })
    }
  }

  // Ïä§ÌÜ±ÏõåÏπò Ï¥àÍ∏∞ ÏÑ§Ï†ï Ìï®Ïàò
  async setTimer() {
    try {
      await this.setState({
        meetingTime: true,
        voteTime: false,
        resultTime: false,
        timeLimit: 600,
      })
      await this.state.session.signal({
        data: `${this.state.timeLimit}`,
        to: [],
        type: 'setTime',
      })
    } catch (err) {
      console.log('error')
    }
  }

  // Ìà¨ÌëúÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
  async moveToVote() {
    try {
      await this.setState({
        meetingTime: false,
        voteTime: true,
        resultTime: false,
        timeLimit: 21,
      })
      await this.state.session.signal({
        data: `${this.state.timeLimit}`,
        to: [],
        type: 'timeToVote',
      })
    } catch (err) {
      console.log('error')
    }
  }

  // Í≤∞Í≥º ÎπÑÍµê
  async compareResult() {
    const { result } = this.props.vote
    const { vote } = this.props.vote
    const { connections } = this.props.vote
    let wrongList = null || []

    console.log('Í≤∞Í≥º ÎπÑÍµêÌï†Í±∞Ïïº ÏïÑÏïÑÏïÑ !!!!!!')
    await Object.entries(result).map((item, idx) => {
      // userÎ•º Ïïà ÎàÑÎ•∏ Í≤ΩÏö∞, default = 1
      // 1. Í≤∞Í≥ºÍ∞Ä voteÏóê ÏóÜÎäî Í≤ΩÏö∞(ÎàÑÎ•¥ÏßÄ ÏïäÏùÄ Í≤ΩÏö∞), Ìï¥Îãπ Ïú†Ï†ÄÍ∞Ä ÏÜîÎ°úÍ±∞ÎÇò
      // 2. Í≤∞Í≥ºÍ∞Ä voteÏóê ÏûàÎäî Í≤ΩÏö∞, voteÏóê Ï†ÄÏû•Îêú Í≤∞Í≥ºÏôÄ Ïã§Ï†ú Ïó≠Ìï†Ïù¥ ÏùºÏπòÌïúÎã§Î©¥ correctPoint + 100
      console.log('ÌôïÏù∏Ìï†Í±∞Îã§ Îî±ÎåÄ !!!!!!!!!!!!!!!!!!!!!!!!!!!!')
      console.log('vote', item[0], item[1], vote[item[0]])
      if (
        (!vote[item[0]] && item[1] === 1) ||
        (vote[item[0]] && item[1] === vote[item[0]])
      ) {
        console.log(
          'Ïò§Ïòà ÎßûÏïòÎã§ !',
          item[0],
          item[1],
          vote[item[0]],
          this.state.correctPoint + 100,
        )
        return this.setState({ correctPoint: this.state.correctPoint + 100 })
      } else {
        // ÌãÄÎ¶∞ Í≤ΩÏö∞ÏóêÎäî Ìï¥Îãπ Ïú†Ï†ÄÏùò Ï†êÏàò + 50
        return wrongList.push(item[0])
      }
    })

    await console.log('Îï°', wrongList)

    // ÎÇ¥Í∞Ä ÌãÄÎ¶∞ ÏÇ¨ÎûåÎì§ÏóêÍ≤å Ï†êÏàò Ï£ºÍ∏∞
    await wrongList.map((item, idx) => {
      return this.state.session.signal({
        data: this.state.myUserName,
        to: [connections[item]],
        type: 'plusPoint',
      })
    })

    await this.setState({ calcResult: true })

    // ÏµúÏ¢Ö Ìè¨Ïù∏Ìä∏ Î≥¥ÎÇ¥Í∏∞
    await setTimeout(() => {
      const score = this.state.correctPoint + this.state.wrongPoint
      this.state.session.signal({
        data: score,
        to: [],
        type: 'sendScore',
      })
    }, 5500)

    // ÏµúÏ¢Ö Ìè¨Ïù∏Ìä∏ Ï†ÅÏö©ÌïòÍ∏∞
    await setTimeout(() => {
      const score = this.state.correctPoint + this.state.wrongPoint
      const res = myAxios.put('/honjaya/points', {
        point: score,
      })
      this.setState({
        myUserPoint: res.data.point,
      })
    }, 7000)
  }

  // Í≤∞Í≥ºÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
  async moveToResult() {
    try {
      await this.setState({
        meetingTime: false,
        voteTime: false,
        resultTime: true,
        timeLimit: 0,
      })
      await this.state.session.signal({
        data: `${this.state.timeLimit}`,
        to: [],
        type: 'timeToResult',
      })
      await this.stopTimer()
    } catch (err) {
      console.log('error')
    }
  }

  // Ïä§ÌÜ±ÏõåÏπò ÏãúÍ∞Ñ Î™®Îã¨ Ìï®Ïàò
  showSelectTimer = () => {
    if (this.state.showAddTimer === false) {
      ToastsStore.info(`ÏãúÍ∞Ñ Ïó∞Ïû• ÌöüÏàò ${this.state.addTimeLimit}Ìöå ÎÇ®ÏïòÏäµÎãàÎã§`)
    }
    this.setState({ showAddTimer: !this.state.showAddTimer })
  }

  onbeforeunload(event) {
    this.leaveSession()
  }

  handleChangeSessionId(e) {
    this.setState({
      mySessionId: e.target.value,
    })
  }

  handleChangeUserName(e) {
    this.setState({
      myUserName: e.target.value,
    })
  }

  handleMainVideoStream(stream) {
    if (this.state.mainStreamManager !== stream) {
      this.setState({
        mainStreamManager: stream,
      })
    }
  }

  deleteSubscriber(streamManager) {
    let subscribers = this.state.subscribers
    let index = subscribers.indexOf(streamManager, 0)
    if (index > -1) {
      subscribers.splice(index, 1)
      this.setState({
        subscribers: subscribers,
      })
    }
  }


  //ÏãúÍ∑∏ÎÑêÏùÑ Î≥¥ÎÇ¥Í≥† ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ÏÑúÎ≤ÑÏóêÏÑú Îì£Í≥† Îì§ÏùÄÍ±∏ Îã§Ïãú
  //ÎûúÎç§ Ï£ºÏ†ú ÌîΩ
  shuffleTopic() {
    //shuffle arr
    let topic_idx = Math.floor(Math.random() * this.state.topicList.length)
    this.setState({ randomTopic: this.state.topicList[topic_idx] })
  }

  async pickTopic() {
    try {
      if (this.state.randomCount > 0) {
        console.log('Î¨¥Î£å3Ìöå', this.state.randomCount)
        await this.shuffleTopic()
        this.state.session.signal({
          data: `${this.state.randomTopic}`,
          to: [],
          type: 'randomTopic',
        })
        this.setState({ randomCount: this.state.randomCount - 1 })
      } else {
        const restPointRes = await myAxios.get('/honjaya/points')
        if (restPointRes.data.point < 50) {
          ToastsStore.info('Î£®Ìå°Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§ ‚ùó')
        } else {
          await this.shuffleTopic()
          this.state.session.signal({
            data: `${this.state.randomTopic}`,
            to: [],
            type: 'randomTopic',
          })
          const res = await myAxios.put('/honjaya/points', {
            point: -50,
          })
          await this.setState({
            myUserPoint: res.data.point,
          })
          ToastsStore.info('-50 Î£®Ìå° ‚ùó')
        }
      }
    } catch (err) {
      console.log('err')
    }
  }

  //Ï±ÑÌåÖ Î≥¥ÎÇ¥Îäî Ìï®Ïàò
  handleChatMessageChange(e) {
    this.setState({
      message: e.target.value,
    })
  }

  sendmessageByClick() {
    if (this.state.message.trim() !== ''){
      this.setState({
        messages: [
          ...this.state.messages,
          {
            userName: this.state.myUserName,
            text: this.state.message,
            chatClass: 'messages__item--operator',
          },
        ],
      })
      const mySession = this.state.session

      mySession.signal({
        data: `${this.state.myUserName},${this.state.message}`,
        to: [this.state.chatConnection],
        type: 'chat',
      })

      this.setState({
        message: '',
      })
    }
  }

  sendmessageByEnter(e) {
    if (e.key === 'Enter') {
      if (this.state.message.trim() !== ''){
        this.setState({
          messages: [
            ...this.state.messages,
            {
              userName: this.state.myUserName,
              text: this.state.message,
              chatClass: 'messages__item--operator',
            },
          ],
        })
        const mySession = this.state.session

        mySession.signal({
          data: `${this.state.myUserName},${this.state.message}`,
          to: [this.state.chatConnection],
          type: 'chat',
        })

        this.setState({
          message: '',
        })
      }
    }
  }



  joinSession() {
    // --- 1) Get an OpenVidu object ---

    this.OV = new OpenVidu()

    // --- 2) Init a session ---

    this.setState(
      {
        session: this.OV.initSession(),
      },
      () => {
        var mySession = this.state.session

        // --- 3) Specify the actions when events take place in the session ---

        // On every new Stream received...
        mySession.on('streamCreated', (event) => {
          // Subscribe to the Stream to receive it. Second parameter is undefined
          // so OpenVidu doesn't create an HTML video by its own
          var subscriber = mySession.subscribe(event.stream, undefined)
          var subscribers = this.state.subscribers
          subscribers.push(subscriber)
          if (
            this.state.myRoleCode === 3 &&
            JSON.parse(subscriber.stream.connection.data).clientData ===
              this.state.pairUser.userNickname
          ) {
            this.setState({ chatConnection: subscriber.stream.connection })
          }
          if (
            this.state.myRoleCode === 2 &&
            JSON.parse(subscriber.stream.connection.data).clientData ===
              this.state.pairUser.userNickname
          ) {
            this.setState({ pairConnection: subscriber.stream.connection })
          }

          // Update the state with the new subscribers
          this.setState({
            subscribers: subscribers,
          })
          this.setTimer()
        })

        // On every Stream destroyed...
        mySession.on('streamDestroyed', (event) => {
          // Remove the stream from 'subscribers' array
          this.deleteSubscriber(event.stream.streamManager)
        })

        // On every asynchronous exception...
        mySession.on('exception', (exception) => {
          console.warn(exception)
        })

        //ÎûúÎç§ Ï£ºÏ†úÏóêÏÑú Î≥¥ÎÇ∏ ÏãúÍ∑∏ÎÑêÏùÑ Îì§Ïñ¥Î≥¥Ïûê
        mySession.on('signal:randomTopic', (event) => {
          this.setState({ randomTopic: event.data })

          console.log(event)
          console.log(event.data)
        })

        // ÏãúÍ∞Ñ ÏÑ§Ï†ï ÏãúÍ∑∏ÎÑê
        mySession.on('signal:setTime', (event) => {
          this.setState({
            meetingTime: true,
            voteTime: false,
            resultTime: false,
            timeLimit: 600,
          })
        })

        // Ìà¨ÌëúÎ°ú Ï†ÑÌôò
        mySession.on('signal:timeToVote', (event) => {
          this.setState({
            meetingTime: false,
            voteTime: true,
            resultTime: false,
            timeLimit: 21,
          })
        })

        // Í≤∞Í≥ºÌôîÎ©¥ÏúºÎ°ú Ï†ÑÌôò
        mySession.on('signal:timeToResult', (event) => {
          this.setState({
            meetingTime: false,
            voteTime: false,
            resultTime: true,
            timeLimit: 0,
          })
        })

        // Ìà¨ÌëúÏ†êÏàò Î∞õÍ∏∞
        mySession.on('signal:sendScore', (event) => {
          // console.log('sendScore', event)
          const name = JSON.parse(event.from.data).clientData
          let score = parseInt(event.data)

          if (isNaN(score)) {
            score = 0
          }

          let replace = {
            ...this.state.ranking,
          }
          replace[name] = score

          const sortReplace = Object.fromEntries(
            Object.entries(replace).sort(([, a], [, b]) => b - a),
          )
          console.log('sortReplace', sortReplace)
          this.setState({
            ranking: sortReplace,
          })
        })

        // ÎàÑÍµ∞Í∞ÄÍ∞Ä ÌãÄÎ†§ÏÑú ÎÇ¥Í∞Ä Ï†êÏàòÎ•º Î∞õÎäî Í≤ΩÏö∞
        mySession.on('signal:plusPoint', (event) => {
          console.log(
            'Ïü§Í∞Ä ÎÇòÌïúÌÖå Ï†êÏàòÏ§å „Öã',
            event.data,
            this.state.wrongPoint + 50,
          )
          this.setState({ wrongPoint: this.state.wrongPoint + 50 })
          if (this.state.myRoleCode === 2) {
            this.state.session.signal({
              data: event.data,
              to: [this.state.pairConnection],
              type: 'plusPoint',
            })
          }
        })

        // ÏãúÍ∞Ñ Ï∂îÍ∞Ä ÏãúÍ∑∏ÎÑê
        mySession.on('signal:addTime', (event) => {
          this.setState({ timeLimit: event.data })
          console.log('ÏãúÍ∑∏ÎÑê Î∞õÏïòÏùÑ Îïå', this.state.addTimeLimit)
          this.setState({ addTimeLimit: this.state.addTimeLimit - 1 })
          ToastsStore.info(`ÎàÑÍµ∞Í∞Ä ÏãúÍ∞Ñ Ïó∞Ïû•ÏùÑ ÌïòÏó¨, Ïó∞Ïû• Í∞ÄÎä• ÌöüÏàò ${this.state.addTimeLimit}Ìöå ÎÇ®ÏïòÏäµÎãàÎã§`)
        })

        // ÏÑ∏ÏÖò ÎÇòÍ∞ÄÍ∏∞
        mySession.on('signal:endMeeting', (event) => {
          const leaveName = event.data
          console.log(leaveName)
          
          alert(`${leaveName}ÎãòÏù¥ ÎØ∏ÌåÖÏùÑ ÎÇòÍ∞Ä Î©îÏù∏ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ëÎãàÎã§.`)
          this.leaveSession()
        })

        //Ï±ÑÌåÖ Îì£Í∏∞
        mySession.on('signal:chat', (event) => {
          let chatdata = event.data.split(',')
          if (chatdata[0] !== this.state.myUserName) {
            this.setState({
              messages: [
                ...this.state.messages,
                {
                  userName: chatdata[0],
                  text: chatdata[1],
                  chatClass: 'messages__item--visitor',
                },
              ],
            })
          }
        })

        // --- 4) Connect to the session with a valid user token ---

        // 'getToken' method is simulating what your server-side should do.
        // 'token' parameter should be retrieved and returned by your own backend
        this.getToken().then((token) => {
          // First param is the token got from OpenVidu Server. Second param can be retrieved by every user on event
          // 'streamCreated' (property Stream.connection.data), and will be appended to DOM as the user's nickname

          // Î™®ÎëêÍ∞Ä Ïïå Ïàò ÏûàÏñ¥Ïïº ÌïòÎäî Ï†ïÎ≥¥ ÌÜµÏã†ÌïòÍ∏∞(ÎãâÎÑ§ÏûÑ, Ìï¥ÏãúÌÉúÍ∑∏, Î°§ÏΩîÎìú, Ïú†Ï†ÄÎÑòÎ≤Ñ)
          mySession
            .connect(token, {
              clientData: this.state.myUserName,
              hashtags: this.state.hashList,
              roleCodes: this.state.myRoleCode,
              userDatas: this.state.myUserData,
              userRate: this.state.userRate,
            })
            .then(async () => {
              var devices = await this.OV.getDevices()
              var videoDevices = devices.filter(
                (device) => device.kind === 'videoinput',
              )

              // --- 5) Get your own camera stream ---
              let publisher

              if (this.state.myRoleCode === 3) {
                // Init a publisher passing undefined as targetElement (we don't want OpenVidu to insert a video
                // element: we will manage it on our own) and with the desired properties
                publisher = this.OV.initPublisher(undefined, {
                  audioSource: undefined, // The source of audio. If undefined default microphone
                  videoSource: videoDevices[0].deviceId, // The source of video. If undefined default webcam
                  publishAudio: false, // Whether you want to start publishing with your audio unmuted or not
                  publishVideo: false, // Whether you want to start publishing with your video enabled or not
                  resolution: '640x480', // The resolution of your video
                  frameRate: 30, // The frame rate of your video
                  insertMode: 'APPEND', // How the video is inserted in the target element 'video-container'
                  mirror: false, // Whether to mirror your local video or not
                })
              } else {
                publisher = this.OV.initPublisher(undefined, {
                  audioSource: undefined, // The source of audio. If undefined default microphone
                  videoSource: videoDevices[0].deviceId, // The source of video. If undefined default webcam
                  publishAudio: true, // Whether you want to start publishing with your audio unmuted or not
                  publishVideo: true, // Whether you want to start publishing with your video enabled or not
                  resolution: '640x480', // The resolution of your video
                  frameRate: 30, // The frame rate of your video
                  insertMode: 'APPEND', // How the video is inserted in the target element 'video-container'
                  mirror: false, // Whether to mirror your local video or not
                })
              }

              // --- 6) Publish your stream ---

              mySession.publish(publisher)

              // Set the main video in the page to display our webcam and store our Publisher
              this.setState({
                currentVideoDevice: videoDevices[0],
                mainStreamManager: publisher,
                publisher: publisher,
              })
            })
            .catch((error) => {
              console.log(
                'There was an error connecting to the session:',
                error.code,
                error.message,
              )
            })
        })
      },
    )
  }

  leaveSession() {
    // --- 7) Leave the session by calling 'disconnect' method over the Session object ---

    const mySession = this.state.session

    if (mySession) {
      mySession.disconnect()
    }

    // Empty all properties...
    this.OV = null
    this.setState({
      session: undefined,
      subscribers: [],
      mySessionId: 'SessionA',
      myUserName: 'Participant' + Math.floor(Math.random() * 100),
      mainStreamManager: undefined,
      publisher: undefined,
    })

    this.props.history.push('/main')
  }

  async switchCamera() {
    try {
      const devices = await this.OV.getDevices()
      var videoDevices = devices.filter(
        (device) => device.kind === 'videoinput',
      )

      if (videoDevices && videoDevices.length > 1) {
        var newVideoDevice = videoDevices.filter(
          (device) =>
            device.deviceId !== this.state.currentVideoDevice.deviceId,
        )

        if (newVideoDevice.length > 0) {
          // Creating a new publisher with specific videoSource
          // In mobile devices the default and first camera is the front one
          var newPublisher = this.OV.initPublisher(undefined, {
            videoSource: newVideoDevice[0].deviceId,
            publishAudio: true,
            publishVideo: true,
            mirror: true,
          })

          //newPublisher.once("accessAllowed", () => {
          await this.state.session.unpublish(this.state.mainStreamManager)

          await this.state.session.publish(newPublisher)
          this.setState({
            currentVideoDevice: newVideoDevice,
            mainStreamManager: newPublisher,
            publisher: newPublisher,
          })
        }
      }
    } catch (e) {
      console.error(e)
    }
  }

  getToken() {
    return this.createSession(this.state.mySessionId).then((sessionId) =>
      this.createToken(sessionId),
    )
  }

  createSession(sessionId) {
    return new Promise((resolve, reject) => {
      var data = JSON.stringify({ customSessionId: sessionId })
      axios
        .post(OPENVIDU_SERVER_URL + '/openvidu/api/sessions', data, {
          headers: {
            Authorization:
              'Basic ' + btoa('OPENVIDUAPP:' + OPENVIDU_SERVER_SECRET),
            'Content-Type': 'application/json',
          },
        })
        .then((response) => {
          console.log('CREATE SESION', response)
          resolve(response.data.id)
        })
        .catch((response) => {
          var error = Object.assign({}, response)
          if (error?.response?.status === 409) {
            resolve(sessionId)
          } else {
            console.log(error)
            console.warn(
              'No connection to OpenVidu Server. This may be a certificate error at ' +
                OPENVIDU_SERVER_URL,
            )
            if (
              window.confirm(
                'No connection to OpenVidu Server. This may be a certificate error at "' +
                  OPENVIDU_SERVER_URL +
                  '"\n\nClick OK to navigate and accept it. ' +
                  'If no certificate warning is shown, then check that your OpenVidu Server is up and running at "' +
                  OPENVIDU_SERVER_URL +
                  '"',
              )
            ) {
              window.location.assign(
                OPENVIDU_SERVER_URL + '/accept-certificate',
              )
            }
          }
        })
    })
  }

  createToken(sessionId) {
    return new Promise((resolve, reject) => {
      var data = {}
      axios
        .post(
          OPENVIDU_SERVER_URL +
            '/openvidu/api/sessions/' +
            sessionId +
            '/connection',
          data,
          {
            headers: {
              Authorization:
                'Basic ' + btoa('OPENVIDUAPP:' + OPENVIDU_SERVER_SECRET),
              'Content-Type': 'application/json',
            },
          },
        )
        .then((response) => {
          console.log('TOKEN', response)
          resolve(response.data.token)
        })
        .catch((error) => reject(error))
    })
  }

  render() {
    // const mySessionId = this.state.mySessionId
    // const myUserName = this.state.myUserName
    const messages = this.state.messages

    return (
      <Background>
        {this.state.resultTime ? <Countdown /> : null}
        <Header>
          <LogoBox>
            <Logo />
          </LogoBox>

          {!this.state.resultTime ? (
            <TimerBox>
              <Timer onClick={this.stopTimer}>
                {this.state.minute}:{this.state.sec < 10 ? 0 : null}
                {this.state.sec}
              </Timer>

              {this.state.meetingTime ? (
                <AddBox onClick={this.showSelectTimer}>
                  <AddTimerImg />
                  <AddText className="timerTip">
                    3Î∂Ñ Ï∂îÍ∞Ä
                    <br />
                    (-100 Î£®Ìå°)
                  </AddText>
                </AddBox>
              ) : null}

              {this.state.meetingTime && this.state.showAddTimer ? (
                <TimerCheckBox>
                  <TimerCheckBtn className="ok" onClick={this.addTimer}>
                    Ïó∞Ïû•
                  </TimerCheckBtn>
                  <TimerCheckBtn className="no" onClick={this.showSelectTimer}>
                    Ï∑®ÏÜå
                  </TimerCheckBtn>
                </TimerCheckBox>
              ) : null}
            </TimerBox>
          ) : null}

          <LeftBox>
            <PointImg />
            <PointText>
              {this.state.myUserPoint === undefined
                ? 0
                : this.state.myUserPoint
                    .toString()
                    .replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
            </PointText>
          </LeftBox>
        </Header>

        <Container>
          <style jsx="true">{`
            .toast {
              font-family: Minseo !important;
            }
          `}</style>
          <ToastsContainer
            position={ToastsContainerPosition.TOP_RIGHT}
            store={ToastsStore}
            lightBackground
          />
          {this.state.session !== undefined ? (
            <TopicBox>
              {this.state.meetingTime ? (
                <TopicText>{this.state.randomTopic}</TopicText>
              ) : null}
              {this.state.voteTime ? (
                <TopicText>
                  ‚ùì ÏïÑÎ∞îÌÉÄÎäî ÎàÑÍµ¨ÏùºÍπåÏöî ‚ùî<br /> ÏïÑÎ∞îÌÉÄÎ°ú ÏòàÏÉÅÎêòÎäî Ïú†Ï†ÄÏùò
                  ÌôîÎ©¥ÏùÑ ÎàåÎü¨ Ìà¨ÌëúÌïòÏÑ∏Ïöî !
                </TopicText>
              ) : null}
              {this.state.resultTime ? (
                <TopicText>
                  ‚ú® Ìà¨ÌëúÍ∞Ä Ï¢ÖÎ£åÎêòÏóàÏäµÎãàÎã§ ‚ú®<br />
                  ÏÑúÎ°úÏùò Ï†ïÏ≤¥Î•º Î∞ùÌûàÍ≥† ÏûêÏú†Î°≠Í≤å ÎåÄÌôîÌïòÏÑ∏Ïöî !
                </TopicText>
              ) : null}

              {this.state.meetingTime ? (
                <ChangeBox>
                  <TopicIcon onClick={this.pickTopic}></TopicIcon>
                  {this.state.randomCount > 0 ? (
                    <ChangeText className="changeTip">
                      Ï£ºÏ†úÏ∂îÏ≤ú
                      <br />
                      (Î¨¥Î£å {this.state.randomCount}Ìöå)
                    </ChangeText>
                  ) : (
                    <ChangeText className="changeTip">
                      Ï£ºÏ†úÏ∂îÏ≤ú
                      <br />
                      (-50 Î£®Ìå°)
                    </ChangeText>
                  )}
                </ChangeBox>
              ) : null}
            </TopicBox>
          ) : null}

          {/* ÏÑ∏ÏÖò Ïó¥Î†∏ÏùÑ Îïå */}
          {this.state.session !== undefined ? (
            <SessionBox className="SessionBox">
              <ChatVideoBox>
                {this.state.meetingTime ? (
                  <ChatBox>
                    {this.state.myRoleCode === 1 ? (
                      <MyInfo>
                        <InfoIcon />
                        ÎãπÏã†ÏùÄ{' '}
                        <InfoPoint>
                          {' '}
                          {this.state.roleList[this.state.myRoleCode - 1]}
                        </InfoPoint>
                        ÏûÖÎãàÎã§
                      </MyInfo>
                    ) : (
                      <MyInfo>
                        <InfoIcon />
                        ÎãπÏã†ÏùÄ{' '}
                        <InfoPoint>
                          {' '}
                          {this.state.pairUser.userNickname}Ïùò{' '}
                          {this.state.roleList[this.state.myRoleCode - 1]}
                        </InfoPoint>
                        ÏûÖÎãàÎã§
                      </MyInfo>
                    )}
                    {this.state.myRoleCode === 2 ? (
                      <CommanderWarn>
                        *Ï£ºÏùò* ÏïÑÎ∞îÌÉÄÏùò Ï±ÑÌåÖÏùÄ Î™®ÎëêÍ∞Ä Î≥º Ïàò ÏûàÏñ¥Ïöî
                      </CommanderWarn>
                    ) : null}

                    {this.state.myRoleCode === 3 ? (
                      <CommanderWarn>
                        * ÏßÄÏãúÏûêÏùò Ï±ÑÌåÖÏùÄ ÏïÑÎ∞îÌÉÄÎßå Î≥º Ïàò ÏûàÏñ¥Ïöî
                      </CommanderWarn>
                    ) : null}
                    <MessageBox>
                      <Messages
                        messages={messages}
                        pairUser={this.state.pairUser}
                        myRole={this.state.myRoleCode}
                        myName={this.state.myUserName}
                      />
                      <div
                        style={{ float: 'left', clear: 'both' }}
                        ref={(el) => {
                          this.messagesEnd = el
                        }}
                      ></div>
                    </MessageBox>
                    <SendMsgBox>
                      <SendMsg
                        id="chat_message"
                        type="text"
                        placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                        onChange={this.handleChatMessageChange}
                        onKeyPress={this.sendmessageByEnter}
                        value={this.state.message}
                      />
                      <SendBtn onClick={this.sendmessageByClick}>Ï†ÑÏÜ°</SendBtn>
                    </SendMsgBox>
                  </ChatBox>
                ) : null}

                  <VideoBox className="VideoBox">
                    {/* ÎÇ¥ Ïπ¥Î©îÎùº */}
                    {this.state.publisher !== undefined ? (
                      <UserVideoComponent
                        streamManager={this.state.publisher}
                        myUserName={this.state.myUserName}
                        myRoleCode={this.state.myRoleCode}
                        myPairUser={this.state.pairUser}
                        meetingTime={this.state.meetingTime}
                        voteTime={this.state.voteTime}
                        resultTime={this.state.resultTime}
                        myRate={this.state.userRate}
                      />
                    ) : null}

                    {/* ÏÉÅÎåÄÏπ¥Î©îÎùº */}
                    {this.state.subscribers.map((sub, i) => (
                      <UserVideoComponent
                        streamManager={sub}
                        myUserName={this.state.myUserName}
                        myRoleCode={this.state.myRoleCode}
                        myPairUser={this.state.pairUser}
                        meetingTime={this.state.meetingTime}
                        voteTime={this.state.voteTime}
                        resultTime={this.state.resultTime}
                        myRate={this.state.userRate}
                      />
                    ))}
                  </VideoBox>
              </ChatVideoBox>

              <Footer>
                <FooterRight/>
                {this.state.myRoleCode !== 3 || (this.state.myRoleCode === 3 && this.state.resultTime) ? (
                  <MicCamBox>
                    {this.state.audiostate ? (
                      <MicOn
                        size="2rem"
                        onClick={() => {
                          this.state.publisher.publishAudio(
                            !this.state.audiostate,
                          )
                          this.setState({ audiostate: !this.state.audiostate })
                        }}
                      />
                    ) : (
                      <MicOff
                        size="2rem"
                        onClick={() => {
                          this.state.publisher.publishAudio(
                            !this.state.audiostate,
                          )
                          this.setState({ audiostate: !this.state.audiostate })
                        }}
                      />
                    )}

                    {this.state.videostate ? (
                      <CamOn
                        size="2rem"
                        onClick={() => {
                          this.state.publisher.publishVideo(
                            !this.state.videostate,
                          )
                          this.setState({ videostate: !this.state.videostate })
                        }}
                      />
                    ) : (
                      <CamOff
                        size="2rem"
                        onClick={() => {
                          this.state.publisher.publishVideo(
                            !this.state.videostate,
                          )
                          this.setState({ videostate: !this.state.videostate })
                        }}
                      />
                    )}
                  </MicCamBox>
                ) : null}

                <FooterRight>
                  {this.state.meetingTime ? (
                    <ShowRanking onClick={() => { this.moveToVote() }}>
                      Î∞îÎ°ú Ìà¨Ìëú üíå
                    </ShowRanking>
                  ) : null }

                  {this.state.resultTime ? (
                    <>
                      <ShowRanking>
                        üëëÍ≤∞Í≥ºÎ≥¥Í∏∞üëë
                        <RankingContainer className="rankingTip">
                          <RankingHeader>Ïò§ÎäòÏùò MVPÎäî? üèÜ</RankingHeader>
                          {this.state.ranking
                            ? Object.entries(this.state.ranking).map(
                                (item, idx) => {
                                  return (
                                    <RankingContent>
                                      <span>{item[0]}</span>
                                      <span>+{item[1]} Î£®Ìå°</span>
                                    </RankingContent>
                                  )
                                },
                              )
                            : null}
                        </RankingContainer>
                      </ShowRanking>
                    </>
                  ) : null}

                  {!this.state.voteTime ? (
                    <LeaveBox
                      onClick={() => {
                        const mySession = this.state.session

                        mySession.signal({
                          data: `${this.state.myUserName}`,
                          to: [],
                          type: 'endMeeting',
                        })
                        this.leaveSession()
                      }}
                    >
                      <Leave />
                      <LeaveText className="leaveTip">ÎÇòÍ∞ÄÍ∏∞</LeaveText>
                    </LeaveBox>
                  ) : null}
                </FooterRight>
              </Footer>
            </SessionBox>
          ) : null}
        </Container>
      </Background>
    )
  }
}

/**
 * --------------------------
 * SERVER-SIDE RESPONSIBILITY
 * --------------------------
 * These methods retrieve the mandatory user token from OpenVidu Server.
 * This behavior MUST BE IN YOUR SERVER-SIDE IN PRODUCTION (by using
 * the API REST, openvidu-java-client or openvidu-node-client):
 *   1) Initialize a Session in OpenVidu Server	(POST /openvidu/api/sessions)
 *   2) Create a Connection in OpenVidu Server (POST /openvidu/api/sessions/<SESSION_ID>/connection)
 *   3) The Connection.token must be consumed in Session.connect() method
 */

//Ï§ëÏïô Í¥ÄÎ¶¨ÏÜåÏóêÏÑú Ïä¨ÎùºÏù¥Ïä§ Í∞ÄÏ†∏ÏôÄÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏùå
const mapStateToProps = (state) => ({
  // loginSlice
  login: state.login,
  hashtag: state.hashtag,
  mode: state.mode,
  vote: state.vote,
  rate: state.rate,
  chat: state.chat
})

// sliceÏóê ÏûàÎäî actions(Î∞©Ï∞æÍ∏∞, Îπ†Î•∏ ÏãúÏûëÎì±Îì±)ÏùÑ ÏÇ¨Ïö©ÌïòÍ≥† Ïã∂ÏùÑ Îïå
const mapDispatchToProps = (dispatch) => {
  return {
    // Îπ†Î•∏ÏãúÏûë
    // quickStartÎäî import { quickStart } from './homeSlice'; Íµ¨Î¨∏ÏùÑ Ïù¥Ïö©Ìï¥ÏÑú action Í∞ÄÏ†∏Ïò® Í≤É
    doLoadUser: () => dispatch(loadUser()),
    // doCompareResult: () => dispatch(compareResult()),
  }
}

// export default Meeting(Ï§ëÏïô Í¥ÄÎ¶¨ÏÜåÏóêÏÑú Ïä¨ÎùºÏù¥Ïä§ Í∞ÄÏ†∏ÏôÄÏÑú ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ connect)
export default connect(mapStateToProps, mapDispatchToProps)(Meeting)

const randomTopicList = [
  'Ïù∏ÏÉù ÏòÅÌôî 3Í∞ÄÏßÄ',
  'Ïù∏ÏÉù ÎìúÎùºÎßà 3Í∞ÄÏßÄ',
  'mbti',
  'Î¨ºÎ≥µ vs Îî±Î≥µ',
  'Ïπ®Ï∞©Îß® vs ÎÖ∏Ïπ®Ï∞©Îß® (Ïπ®Ï∞©Îß® vs Ï£ºÌò∏ÎØºÏùÄ Ïñ¥Îñ§Í∞ÄÏöî?)',
  'Ï¢ãÏïÑÌïòÎäî Í∞ÄÏàò',
  'Ï¢ãÏïÑÌïòÎäî ÎÖ∏Îûò',
  'Í∞ïÏïÑÏßÄ vs Í≥†ÏñëÏù¥',
  'Î°±Ìå®Îî© ÏßÄÌçº Ïò¨Î†§Ï£ºÍ∏∞ Í∞ÄÎä• vs Î∂àÍ∞ÄÎä•',
  'ÍπªÏûé ÎÖºÏüÅ',
  'Í∞ÄÏû• ÏµúÍ∑ºÏóê Í∞Ñ Ïó¨ÌñâÏßÄ',
  'ÏÜåÏ£º vs Îß•Ï£º',
  'Î¶¨Ïï°Ìä∏ vs Î∑∞',
  'Ïä§ÌîÑÎßÅ vs Ïû•Í≥†',
  'Ï∞çÎ®π vs Î∂ÄÎ®π',
  'ÎÇ®ÎÖÄ ÏÇ¨Ïù¥ ÏπúÍµ¨ Í∞ÄÎä•? Î∂àÍ∞ÄÎä•?',
  'Î≥∏ ÏòÅÌôî Ï§ëÏóê Í∞ÄÏû• Î¨¥ÏÑúÏõ†Îçò ÏòÅÌôî',
  'Î≥∏ ÏòÅÌôî Ï§ëÏóê Í∞ÄÏû• Ïä¨ÌéêÎçò ÏòÅÌôî',
  'Î≥∏ ÏòÅÌôî Ï§ëÏóê Í∞ÄÏû• ÏõÉÍ≤ºÎçò ÏòÅÌôî',
  'Ï¢ãÏïÑÌïòÎäî Ïú†ÌäúÎ≤Ñ ÏûàÏúºÏã†Í∞ÄÏöî',
  'Ï¢ãÏïÑÌïòÎäî ÏõπÌà∞ ÏûàÏúºÏã†Í∞ÄÏöî',
  'Ï¢ãÏïÑÌïòÎäî ÏùåÏãù',
  'ÏµúÏï† ÏπòÌÇ®',
  'ÏÇ∞ vs Î∞îÎã§',
  'Ìå•Î∂ï vs ÏäàÎ∂ï',
  'ÎØºÏ¥à vs Î∞òÎØºÏ¥à',
  'ÏßÅÏ†ë Í≤™ÏóàÎçò Ìô©ÎãπÌïú Ïùº',
  'Ï∑®ÎØ∏',
  'Ïò§Î¶¨Í≥†Í∏∞ vs ÏÜåÍ≥†Í∏∞ vs ÎèºÏßÄÍ≥†Í∏∞ vs Îã≠Í≥†Í∏∞',
  'Í∞ÄÏû• Ï¢ãÏïÑÌïòÎäî ÏòÅÌôî',
  'Í∞ïÏïÑÏßÄ vs Í≥†ÏñëÏù¥',
  'ÏÜêÏû°Í≥† ÏÇ¨Í∑ÄÍ∏∞ vs ÏÇ¨Í∑ÄÍ≥† ÏÜêÏû°Í∏∞',
  'Ï†úÏùº Í∏∞ÏñµÏóê ÎÇ®Îäî ÎßõÏßë',
  'Ï†ÑÌôî vs Î¨∏Ïûê',
  'Í∞ÄÏû• Ï¢ãÏïÑÌïòÎäî Í≥ÑÏ†à',
  'Í∞úÎ™ÖÌïúÎã§Î©¥ ÌïòÍ≥† Ïã∂ÏùÄ Ïù¥Î¶Ñ',
  'Ï±ôÍ≤®Î®πÎäî ÏòÅÏñëÏ†ú',
  'ÎØ∏ÎãàÎ©Ä vs Îß•ÏãúÎ©à',
  'ÌõÑÎùºÏù¥Îìú vs ÏñëÎÖê',
  'Ïó¨Î¶Ñ Ï∞úÏßàÎ∞© vs Í≤®Ïö∏ ÏõåÌÑ∞ÌååÌÅ¨',
  'ÎÇòÎ•º Ï¢ãÏïÑÌïòÎäî ÏÇ¨Îûå vs ÎÇ¥Í∞Ä Ï¢ãÏïÑÌïòÎäî ÏÇ¨Îûå',
  '1Î∂Ñ Îã®ÏúÑÎ°ú Í≥ÑÌöç ÏßúÎäî ÏπúÍµ¨Îûë 1Î∞ï2Ïùº Ïó¨Ìñâ  vs Î™∏Îßå Í∞ÄÎäî ÏπúÍµ¨Îûë 1Î∞ï 2Ïùº Ïó¨Ìñâ',
  'ÏπúÍµ¨ vs Ïï†Ïù∏',
  'Ïò§Îäò ÎÇ†Ïî® Ïñ¥Îñ§Í∞ÄÏöî?',
  'Íµ¨Ïö¥ ÏπòÌÇ® vs ÌäÄÍ∏¥ ÏπòÌÇ®',
  'Ï∂îÏö¥ ÎÇ† ÎÉâÎ©¥ vs ÎçîÏö¥ ÎÇ† Íµ≠Î∞•',
  'ÏÜåÏùåÍ≥µÌï¥ vs ÏÜ°Ìï¥Í≥†Ïùå',
  'ÎùºÎ©¥Ïóê Ïä§ÌîÑÎ®ºÏ†Ä vs Î©¥Î®ºÏ†Ä',
  'Î°§Î™®Îç∏',
  'ÎãπÏã†ÏùÑ Ïû¨Ïö¥ Í≤ÉÏùÄ? ÏÑ±ÏãúÍ≤Ω vs ÎÇ¥ÏãúÍ≤Ω',
  'Í∏∞ÏñµÏóê ÎÇ®Îäî ÏπúÍµ¨',
  'Í∞ÄÏû• Í∞ÄÎ≥¥Í≥† Ïã∂ÏùÄ ÎÇòÎùºÏôÄ Ïù¥Ïú†',
  'Îã§Ïùå ÏÉùÏóê ÎèôÎ¨ºÏù¥ ÎêúÎã§Î©¥ Ïñ¥Îñ§ ÎèôÎ¨º?',
  'ÏπòÌÇ® Îºà vs ÏàúÏÇ¥',
  'Ï¢ãÏïÑÌïòÎäî ÏòàÎä•',
  'Ïú†ÌäúÎ∏å Í¥ëÍ≥† 3Ï¥àÏßúÎ¶¨ 10Í∞ú vs 30Ï¥àÏßúÎ¶¨ 1Í∞ú',
  'ÌÜ†ÎßàÌÜ†ÎßõÌÜ† vs ÌÜ†ÎßõÌÜ†ÎßàÌÜ†',
  'ÏÇ¨Ïù¥Îã§ ÏóÜÏù¥ Í≥†Íµ¨Îßà Î®πÍ∏∞ vs ÍπÄÏπòÏóÜÏù¥ ÎùºÎ©¥Î®πÍ∏∞',
  'Ìú¥Í≤åÏÜåÏóê Îì§Î¶∞Îã§Î©¥ Íº≠ Î®πÏñ¥Ïïº ÌïòÎäî ÏùåÏãù, Ìò∏ÎëêÍ≥ºÏûê vs ÌÜµÍ∞êÏûê',
  'Ïù¥ÏÉÅÌòï',
  'Ïô∏Í≥ÑÏù∏Ïù¥ ÏûàÏùÑÍπå?',
  'Ïâ¨Îäî ÎÇ† Î≠êÌïòÏÑ∏Ïöî?',
  'Ìöå Î®πÏùÑ Îïå Ï¥àÏû• vs Í∞ÑÏû•',
  'Î∂ïÏñ¥Îπµ Î®πÏùÑ Îïå Î®∏Î¶¨ Î∂ÄÌÑ∞ Î®πÎäîÏßÄ Íº¨Î¶¨Î∂ÄÌÑ∞ Î®πÎäîÏßÄ',
  'ÏÉàÏΩ§Îã¨ÏΩ§ vs ÎßàÏù¥ÏÆ∏',
  'ÎèôÎ¨º ÌÇ§Ïö∞ÏãúÎÇòÏöî? ÌÇ§Ïö∞Í≥† Ïã∂ÏùÄ ÎèôÎ¨ºÏù¥ ÏûàÎÇòÏöî?',
  'ÏÇ¥Î©¥ÏÑú ÎÇ¥Î¶∞ Í≤∞Ï†ï Ï§ëÏóê Í∞ÄÏû• Ïñ¥Î†§Ïõ†Îçò Í≤∞Ï†ïÏùÄ?',
  'Ïò§Îäò Î≠ê Î®πÏóàÏñ¥Ïöî?',
  'Ï£ºÎßêÏóê Î≠êÌïòÏÑ∏Ïöî?',
  'ÏïÑÎπ† vs ÏóÑÎßà',
  'Í∑ÄÏã†ÏùÑ ÎØøÎäîÏßÄ',
  'Í∏∞ÏñµÏóê ÎÇ®Îäî ÏÑ†Î¨º',
  'ÎÖ∏ÎûòÎ∞© Í∞ÄÏÑú Ïï†Ï∞ΩÍ≥°',
  'Ïò§Ïù¥ Ìò∏Î∂àÌò∏',
  'Ïã¨Ïã¨Ìï† Îïå Î≠êÌïòÎäîÏßÄ',
  'Ï¢ãÏïÑÌïòÎäî Í≤åÏûÑ',
  'ÏµúÍ∑º Í≥†ÎØºÍ±∞Î¶¨',
  'Í∞ÄÏû• Ï¢ãÏïÑÌïòÎäî Ïä§Ìè¨Ï∏†Îäî?',
  'Ïä§Ìä∏Î†àÏä§ Ìï¥ÏÜåÎ≤ï',
  'ÎßàÏßÄÎßâÏúºÎ°ú Î≥∏ ÏòÅÌôî',
  'Í∞ÄÏû• ÏûòÌïòÎäî ÏöîÎ¶¨',
  'Ï¢ãÏïÑÌïòÎäî ÏÉâÍπî',
  'ÏÑ†Ìò∏ÌïòÎäî Ïò∑ Ïä§ÌÉÄÏùº',
  'Ï¢ãÏïÑÌïòÎäî Ïπ¥Ìéò Î©îÎâ¥',
  'Ï¢ãÏïÑÌïòÎäî Ìñ•Ïàò',
  'ÏïÑÏπ®Ìòï vs Ï†ÄÎÖÅÌòï',
  'Í∞ÄÏû• Í∏∞ÏñµÏóê ÎÇ®Îäî ÌÅ¨Î¶¨Ïä§ÎßàÏä§',
  'ÏûêÎäîÎç∞ Î™®Í∏∞ÏÜåÎ¶¨ (ÏïàÎ¨ºÎ¶º) vs ÏÜåÎ¶¨Îäî ÏóÜÎäîÎç∞ Î™®Í∏∞ Î¨ºÎ¶¨Í∏∞',
  'Î≤†Ïä§ÌÇ®ÎùºÎπàÏä§ Ï¢ãÏïÑÌïòÎäî Îßõ',
  'ÌòàÏï°Ìòï',
  'Î≥ºÎπ®Í∞Ñ ÏÇ¨Ï∂òÍ∏∞ vs ÏÇ¨Ï¥åÍ∞Ñ Î≥ºÎπ®Í∏∞',
  'Ïò§Îäò Ï†ÄÎÖÅ Î©îÎâ¥',
  'ÏµúÏï† Ìè¨ÏºìÎ™¨',
  'ÏïÑÎ•¥Î∞îÏù¥Ìä∏ Í≤ΩÌóò',
  'Ìï¥Î≥¥Í≥† Ïã∂ÏùÄ Ìó§Ïñ¥Ïä§ÌÉÄÏùº',
  'ÎèÑÏ†ÑÌï¥Î≥¥Í≥† Ïã∂ÏùÄ Ïùº',
  'Ïó∞Ïï†Ìï† Îïå Î°úÎßù',
]
